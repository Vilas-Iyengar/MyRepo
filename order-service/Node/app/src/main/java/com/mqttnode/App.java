/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.mqttnode;

import com.torryharris.coupler.node.CouplerListenerNode;
import com.torryharris.coupler.node.CouplerNode;
import io.netty.handler.codec.mqtt.MqttProperties;
import io.vertx.core.Promise;
import io.vertx.core.eventbus.Message;
import io.vertx.core.json.Json;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.mqtt.MqttClient;
import io.vertx.mqtt.MqttServer;
import io.vertx.mqtt.MqttTopicSubscription;
import io.vertx.mqtt.messages.codes.MqttSubAckReasonCode;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class App  extends CouplerNode {
    Router router = Router.router(vertx);
    Map<Integer,JsonObject> sample=new HashMap<>();
    @Override
    public void registerEvents(Promise<Void> promise) {
        vertx.eventBus().consumer("REST_API_GET",this::deploy);
        vertx.eventBus().consumer("REST_API_POST",this::deploy);
        vertx.eventBus().consumer("REST_API_PUT",this::deploy);
        vertx.eventBus().consumer("REST_API_DELETE",this::deploy);

        vertx.eventBus().consumer("REST_API_GET",request->{
           getInput(request)
                   .onSuccess(input->{
                      router.get(input.getString("Endpoint url")).handler(routingContext -> {
                         routingContext
                                 .response()
                                 .end(Json.encodePrettily(sample));
                          JsonObject response = new JsonObject()
                                  .put("Url","http://localhost:8086"+input.getString("Endpoint url"));
                            handleNodeSuccess(request,response);
                      });
                   });
        });
        vertx.eventBus().consumer("REST_API_POST",request->{
           getInput(request)
                   .onSuccess(input->{
                       router.post(input.getString("Endpoint url")).handler(BodyHandler.create()).handler(routingContext -> {

                           sample.put(input.getInteger("id"),input);
                          routingContext
                                  .response()
                                  .putHeader("Content-type",input.getString("Request header"))
                                  .end("Data added successfully");
                           JsonObject response = new JsonObject()
                                   .put("Url","http://localhost:8086"+input.getString("Endpoint url"));
                           handleNodeSuccess(request,response);
                       });
                   });
        });
        vertx.eventBus().consumer("REST_API_PUT",request-> {
            getInput(request)
                    .onSuccess(input -> {
                        router.put(input.getString("Endpoint url")+"/"+input.getString("Path param")).handler(BodyHandler.create()).handler(routingContext -> {

                            JsonObject userData = (JsonObject) request.body();
                            sample.put(input.getInteger("id"), userData);
                            routingContext
                                    .response()
                                    .putHeader("Content-type", input.getString("Request header"))
                                    .end("Updated successfully");
                            JsonObject response = new JsonObject()
                                    .put("Url", "http://localhost:8086" + input.getString("Endpoint url"));
                            handleNodeSuccess(request, response);
                        });
                    });
                });
        vertx.eventBus().consumer("REST_API_DELETE",request->{
           getInput(request)
                   .onSuccess(input->{
                      router.delete(input.getString("Endpoint url")+"/:"+input.getString("Path param")).handler(routingContext -> {
                          int id=Integer.parseInt(routingContext.pathParam(input.getString("Path param")));
                          sample.remove(id);
                          routingContext
                                  .response()
                                  .putHeader("Content-type", input.getString("Request header"))
                                  .end("Deleted successfully");
                          JsonObject response = new JsonObject()
                                  .put("Url", "http://localhost:8086" + input.getString("Endpoint url"));
                          handleNodeSuccess(request, response);
                      }) ;
                   });

        });

        }

    private  void deploy(Message<Object> tMessage) {
        vertx.createHttpServer()
                .requestHandler(router)
                .listen(8086);
    }

}
